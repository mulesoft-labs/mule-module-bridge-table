/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module;

import java.util.HashMap;
import java.util.Map;

import org.junit.Test;
import org.mule.api.MuleEvent;
import org.mule.construct.Flow;
import org.mule.module.bridgetable.KeyAlreadyExistsException;
import org.mule.module.bridgetable.KeyDoesNotExistException;
import org.mule.tck.AbstractMuleTestCase;
import org.mule.tck.FunctionalTestCase;

public class BridgeTableModuleTest extends FunctionalTestCase
{
    @Override
    protected String getConfigResources()
    {
        return "mule-config.xml";
    }

    @Test
    public void testInsert() throws Exception
    {
        Map<String, String> payload = new HashMap<String, String>();
        payload.put("key1", "valueKey1");
        payload.put("key2", "valueKey2");
        
        // Insert should return the same payload
        runFlowWithPayloadAndExpect("testInsert", payload, payload);
        
        BridgeTableModule module = muleContext.getRegistry().lookupObject("testConfig");
        
        assertTrue(module.containsKey1("valueKey1"));
        assertEquals("valueKey2", module.retrieveByKey1("valueKey1"));

        assertTrue(module.containsKey2("valueKey2"));
        assertEquals("valueKey1", module.retrieveByKey2("valueKey2"));
        
        assertFalse(module.containsKey1("valueKey2"));
        assertFalse(module.containsKey2("valueKey1"));

        // Duplicate insert
        runFlowWithPayloadAndExpectException("testInsert", KeyAlreadyExistsException.class, payload);
    }

    @Test
    public void testUpdateByKey1() throws Exception
    {
        Map<String, String> payload = new HashMap<String, String>();
        payload.put("key1", "valueKey1");
        payload.put("key2", "valueKey2");   

        runFlowWithPayloadAndExpectException("testUpdateByKey1", KeyDoesNotExistException.class, payload);
        
        // Insert value
        runFlowWithPayloadAndExpect("testInsert", payload, payload);
        
        // Update key1
        payload.put("key2", "newValueKey2");
        runFlowWithPayloadAndExpect("testUpdateByKey1", payload, payload);
        
        BridgeTableModule module = muleContext.getRegistry().lookupObject("testConfig");

        assertTrue(module.containsKey1("valueKey1"));
        assertEquals("newValueKey2", module.retrieveByKey1("valueKey1"));

        // key2 should be updated!
        assertFalse(module.containsKey2("valueKey2"));
        assertTrue(module.containsKey2("newValueKey2"));
        assertEquals("valueKey1", module.retrieveByKey2("newValueKey2"));
    }
    
    @Test
    public void testUpdateByKey2() throws Exception
    {
        Map<String, String> payload = new HashMap<String, String>();
        payload.put("key1", "valueKey1");
        payload.put("key2", "valueKey2");   

        runFlowWithPayloadAndExpectException("testUpdateByKey2", KeyDoesNotExistException.class, payload);
        
        // Insert value
        runFlowWithPayloadAndExpect("testInsert", payload, payload);
        
        // Update key1
        payload.put("key1", "newValueKey1");
        runFlowWithPayloadAndExpect("testUpdateByKey2", payload, payload);
        
        BridgeTableModule module = muleContext.getRegistry().lookupObject("testConfig");

        assertTrue(module.containsKey2("valueKey2"));
        assertEquals("newValueKey1", module.retrieveByKey2("valueKey2"));

        // key2 should be updated!
        assertFalse(module.containsKey1("valueKey1"));
        assertTrue(module.containsKey1("newValueKey1"));
        assertEquals("valueKey2", module.retrieveByKey1("newValueKey1"));
    }
    
    @Test
    public void testUpsertByKey1() throws Exception
    {
        Map<String, String> payload = new HashMap<String, String>();
        payload.put("key1", "valueKey1");
        payload.put("key2", "valueKey2");   
        
        // Insert value
        runFlowWithPayloadAndExpect("testUpsertByKey1", payload, payload);

        BridgeTableModule module = muleContext.getRegistry().lookupObject("testConfig");
        
        assertTrue(module.containsKey1("valueKey1"));
        assertEquals("valueKey2", module.retrieveByKey1("valueKey1"));

        assertTrue(module.containsKey2("valueKey2"));
        assertEquals("valueKey1", module.retrieveByKey2("valueKey2"));
        
        assertFalse(module.containsKey1("valueKey2"));
        assertFalse(module.containsKey2("valueKey1"));        
        
        // Update key1
        payload.put("key2", "newValueKey2");
        runFlowWithPayloadAndExpect("testUpsertByKey1", payload, payload);
        
        assertTrue(module.containsKey1("valueKey1"));
        assertEquals("newValueKey2", module.retrieveByKey1("valueKey1"));

        // key2 should be updated!
        assertFalse(module.containsKey2("valueKey2"));
        assertTrue(module.containsKey2("newValueKey2"));
        assertEquals("valueKey1", module.retrieveByKey2("newValueKey2"));
    }
    
    @Test
    public void testUpsertByKey2() throws Exception
    {
        Map<String, String> payload = new HashMap<String, String>();
        payload.put("key1", "valueKey1");
        payload.put("key2", "valueKey2");   
        
        // Insert value
        runFlowWithPayloadAndExpect("testUpsertByKey2", payload, payload);

        BridgeTableModule module = muleContext.getRegistry().lookupObject("testConfig");
        
        assertTrue(module.containsKey2("valueKey2"));
        assertEquals("valueKey1", module.retrieveByKey2("valueKey2"));

        assertTrue(module.containsKey1("valueKey1"));
        assertEquals("valueKey2", module.retrieveByKey1("valueKey1"));
        
        assertFalse(module.containsKey2("valueKey1"));
        assertFalse(module.containsKey1("valueKey2"));        
        
        // Update key1
        payload.put("key1", "newValueKey1");
        runFlowWithPayloadAndExpect("testUpsertByKey2", payload, payload);
        
        assertTrue(module.containsKey2("valueKey2"));
        assertEquals("newValueKey1", module.retrieveByKey2("valueKey2"));

        // key1 should be updated!
        assertFalse(module.containsKey1("valueKey1"));
        assertTrue(module.containsKey1("newValueKey1"));
        assertEquals("valueKey2", module.retrieveByKey1("newValueKey1"));
    }    
    
    @Test
    public void testRemoveByKey1() throws Exception
    {
        Map<String, String> payload = new HashMap<String, String>();
        payload.put("key1", "valueKey1");
        payload.put("key2", "valueKey2");   

        BridgeTableModule module = muleContext.getRegistry().lookupObject("testConfig");
        
        runFlowWithPayloadAndExpectException("testRemoveByKey1", KeyDoesNotExistException.class, "valueKey1");
        
        // Insert value
        runFlowWithPayloadAndExpect("testInsert", payload, payload);
        assertTrue(module.containsKey1("valueKey1"));
        assertTrue(module.containsKey2("valueKey2"));
        
        runFlowWithPayloadAndExpect("testRemoveByKey1", "valueKey1", "valueKey1");
        
        assertFalse(module.containsKey1("valueKey1"));
        assertFalse(module.containsKey2("valueKey2"));
    }

    @Test
    public void testRemoveByKey2() throws Exception
    {
        Map<String, String> payload = new HashMap<String, String>();
        payload.put("key1", "valueKey1");
        payload.put("key2", "valueKey2");   

        BridgeTableModule module = muleContext.getRegistry().lookupObject("testConfig");
        
        runFlowWithPayloadAndExpectException("testRemoveByKey2", KeyDoesNotExistException.class, "valueKey2");
        
        // Insert value
        runFlowWithPayloadAndExpect("testInsert", payload, payload);
        assertTrue(module.containsKey1("valueKey1"));
        assertTrue(module.containsKey2("valueKey2"));
        
        runFlowWithPayloadAndExpect("testRemoveByKey2", "valueKey2", "valueKey2");
        
        assertFalse(module.containsKey1("valueKey1"));
        assertFalse(module.containsKey2("valueKey2"));
    }
    
    @Test
    public void testRetrieveByKey1() throws Exception
    {
        Map<String, String> payload = new HashMap<String, String>();
        payload.put("key1", "valueKey1");
        payload.put("key2", "valueKey2");   

        runFlowWithPayloadAndExpectException("testRetrieveByKey1", KeyDoesNotExistException.class, "valueKey1");
        
        // Insert value
        runFlowWithPayloadAndExpect("testInsert", payload, payload);

        // Retrieve
        runFlowWithPayloadAndExpect("testRetrieveByKey1", "valueKey2", "valueKey1");
    }

    @Test
    public void testRetrieveByKey2() throws Exception
    {
        Map<String, String> payload = new HashMap<String, String>();
        payload.put("key1", "valueKey1");
        payload.put("key2", "valueKey2");   

        runFlowWithPayloadAndExpectException("testRetrieveByKey2", KeyDoesNotExistException.class, "valueKey2");
        
        // Insert value
        runFlowWithPayloadAndExpect("testInsert", payload, payload);

        // Retrieve
        runFlowWithPayloadAndExpect("testRetrieveByKey2", "valueKey1", "valueKey2");
    }
    
    /**
    * Run the flow specified by name and assert equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    */
    protected <T> void runFlowAndExpect(String flowName, T expect) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = AbstractMuleTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
     * Run the flow specified by name and assert equality on the expected exception
     *
     * @param flowName The name of the flow to run
     * @param expect The expected exception
     */
     protected <T extends Throwable> void runFlowAndExpectException(String flowName, Class<T> expect) throws Exception
     {
         Flow flow = lookupFlowConstruct(flowName);
         MuleEvent event = AbstractMuleTestCase.getTestEvent(null);
         MuleEvent responseEvent = flow.process(event);

         assertNotNull(responseEvent.getMessage().getExceptionPayload());
         assertEquals(expect, responseEvent.getMessage().getExceptionPayload().getRootException().getClass());
     }

     /**
      * Run the flow specified by name using the specified payload and assert
      * equality on the expected exception
      *
      * @param flowName The name of the flow to run
      * @param expect The expected exception
      * @param payload The payload of the input event
      */
      protected <T, U> void runFlowWithPayloadAndExpectException(String flowName, Class<T> expect, U payload) throws Exception
      {
          Flow flow = lookupFlowConstruct(flowName);
          MuleEvent event = AbstractMuleTestCase.getTestEvent(payload);
          MuleEvent responseEvent = flow.process(event);

          assertNotNull(responseEvent.getMessage().getExceptionPayload());
          assertEquals(expect, responseEvent.getMessage().getExceptionPayload().getRootException().getClass());
      }
      
    /**
    * Run the flow specified by name using the specified payload and assert
    * equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    * @param payload The payload of the input event
    */
    protected <T, U> void runFlowWithPayloadAndExpect(String flowName, T expect, U payload) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = AbstractMuleTestCase.getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
     * Retrieve a flow by name from the registry
     *
     * @param name Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name)
    {
        return (Flow) AbstractMuleTestCase.muleContext.getRegistry().lookupFlowConstruct(name);
    }
}
